#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ RAG Indexer
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ Python —Ñ–∞–π–ª–∞—Ö
"""

import os
import sys
import chardet
import shutil
from datetime import datetime


def detect_encoding(file_path):
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    
    Returns:
        str: –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ None
    """
    try:
        with open(file_path, 'rb') as f:
            raw_data = f.read()
            if raw_data:
                result = chardet.detect(raw_data)
                return result.get('encoding')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è {file_path}: {e}")
    return None


def read_file_with_encoding(file_path, encoding):
    """
    –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        encoding: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
    
    Returns:
        str: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        with open(file_path, 'r', encoding=encoding) as f:
            return f.read()
    except UnicodeDecodeError:
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None


def clean_problematic_chars(content):
    """
    –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    
    Args:
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    """
    if not content:
        return content
    
    # –£–¥–∞–ª–∏—Ç—å null bytes –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    content = content.replace('\u0000', '')
    content = content.replace('\x00', '')
    content = content.replace('\x95', '')  # –ü—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–π –±–∞–π—Ç –∏–∑ –æ—à–∏–±–∫–∏
    
    # –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫ –∏ —Ç–∞–±–æ–≤
    cleaned_content = ''.join(char for char in content 
                            if ord(char) >= 32 or char in '\n\t\r')
    
    return cleaned_content


def fix_file_encoding(file_path, backup=True):
    """
    –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        backup: –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
    
    Returns:
        bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
    """
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")
    
    # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if backup:
        backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        try:
            shutil.copy2(file_path, backup_path)
            print(f"  –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        except Exception as e:
            print(f"  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
    
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
    detected_encoding = detect_encoding(file_path)
    print(f"  –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {detected_encoding}")
    
    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è
    encodings_to_try = [
        detected_encoding,
        'utf-8',
        'utf-8-sig',  # UTF-8 —Å BOM
        'cp1252',     # Windows-1252
        'iso-8859-1', # Latin-1
        'cp1251',     # Windows-1251 (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
        'latin1'
    ]
    
    content = None
    used_encoding = None
    
    for encoding in encodings_to_try:
        if encoding:
            content = read_file_with_encoding(file_path, encoding)
            if content is not None:
                used_encoding = encoding
                print(f"  –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {encoding}")
                break
    
    if content is None:
        print(f"  –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
        return False
    
    # –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    original_length = len(content)
    cleaned_content = clean_problematic_chars(content)
    
    if len(cleaned_content) != original_length:
        print(f"  –£–¥–∞–ª–µ–Ω–æ {original_length - len(cleaned_content)} –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ shebang
    if file_path.endswith('.py'):
        lines = cleaned_content.split('\n')
        if lines and not lines[0].startswith('#!'):
            # –î–æ–±–∞–≤–∏—Ç—å shebang –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            lines.insert(0, '#!/usr/bin/env python3')
            cleaned_content = '\n'.join(lines)
            print(f"  –î–æ–±–∞–≤–ª–µ–Ω shebang")
        
        # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        has_encoding_declaration = False
        for i, line in enumerate(lines[:3]):  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
            if 'coding' in line and 'utf-8' in line:
                has_encoding_declaration = True
                break
        
        if not has_encoding_declaration:
            # –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            insert_pos = 1 if lines[0].startswith('#!') else 0
            encoding_line = '# -*- coding: utf-8 -*-'
            lines.insert(insert_pos, encoding_line)
            cleaned_content = '\n'.join(lines)
            print(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8")
    
    # –ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª –≤ UTF-8
    try:
        with open(file_path, 'w', encoding='utf-8', newline='\n') as f:
            f.write(cleaned_content)
        print(f"  –£–°–ü–ï–•: –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ UTF-8")
        return True
    except Exception as e:
        print(f"  –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    project_files = [
        'indexer.py',
        'config.py',
        'database_manager.py',
        'embedding_processor.py',
        'batch_processor.py',
        'utils.py',
        'master_indexer.py',
        'file_utils.py',
        'ocr_processor.py',
        'doc_converter.py',
        'document_parsers.py',
        'loading_helpers.py',
        'enhanced_pdf_processor.py',
        'file_utils_core.py'
    ]
    
    print("=" * 60)
    print("–£–¢–ò–õ–ò–¢–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–î–ò–†–û–í–ö–ò RAG INDEXER")
    print("=" * 60)
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ {len(project_files)} —Ñ–∞–π–ª–∞—Ö...")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ chardet —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    try:
        import chardet
    except ImportError:
        print("–û–®–ò–ë–ö–ê: –ú–æ–¥—É–ª—å chardet –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é: pip install chardet")
        sys.exit(1)
    
    fixed_files = []
    missing_files = []
    failed_files = []
    
    for file_path in project_files:
        if not os.path.exists(file_path):
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            missing_files.append(file_path)
            continue
        
        try:
            if fix_file_encoding(file_path):
                fixed_files.append(file_path)
            else:
                failed_files.append(file_path)
        except Exception as e:
            print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
            failed_files.append(file_path)
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("=" * 60)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(fixed_files)}")
    print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(missing_files)}")
    print(f"–û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(failed_files)}")
    
    if fixed_files:
        print(f"\n–£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù–û:")
        for file_path in fixed_files:
            print(f"  ‚úì {file_path}")
    
    if missing_files:
        print(f"\n–ù–ï –ù–ê–ô–î–ï–ù–û:")
        for file_path in missing_files:
            print(f"  - {file_path}")
    
    if failed_files:
        print(f"\n–û–®–ò–ë–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò:")
        for file_path in failed_files:
            print(f"  ‚úó {file_path}")
    
    print(f"\n–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .backup_YYYYMMDD_HHMMSS")
    print(f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π.")
    
    if fixed_files and not failed_files:
        print(f"\nüéâ –í–°–ï –§–ê–ô–õ–´ –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print(f"–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python indexer.py")
    elif failed_files:
        print(f"\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –§–ê–ô–õ–´ –ù–ï –£–î–ê–õ–û–°–¨ –ò–°–ü–†–ê–í–ò–¢–¨")
        print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é")
    
    print("=" * 60)


if __name__ == "__main__":
    main()
